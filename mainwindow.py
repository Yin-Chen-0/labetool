# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindowgui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QWidget, QListView, QAbstractItemView, QTreeView, QPlainTextEdit, \
    QMainWindow
from PIL import Image

from MyLabel import MyLabel


class Ui_MainWindow(QMainWindow):
    filelists = []
    imgs = ['png', 'jpg', 'JPEG', 'bmp', 'JPG']
    index = 0
    savePath = "./data"
    imgSize = None

    data = []
    object_data = []

    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.rect = None
        self.setupUi()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(1500, 927)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.label_display2 = QtWidgets.QLabel(self.centralwidget)
        self.label_display2 = QtWidgets.QLabel(self.centralwidget)
        self.label_display2.setGeometry(QtCore.QRect(220, 0, 981, 851))
        self.label_display2.setAutoFillBackground(False)
        self.label_display2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_display2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_display2.setMidLineWidth(0)
        self.label_display2.setObjectName("label_display2")

        self.label_display = MyLabel(self.centralwidget)
        self.label_display.setGeometry(QtCore.QRect(220, 0, 981, 851))
        self.label_display.setObjectName("label_display")

        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(1210, 470, 271, 381))
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.plainTextEdit_fileLists = QtWidgets.QPlainTextEdit(self.widget_2)
        self.plainTextEdit_fileLists.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)

        self.plainTextEdit_fileLists.setObjectName("plainTextEdit_fileLists")
        self.verticalLayout_2.addWidget(self.plainTextEdit_fileLists)
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setGeometry(QtCore.QRect(530, 650, 120, 80))
        self.widget_3.setObjectName("widget_3")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 50, 171, 651))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.widget = QtWidgets.QWidget(self.layoutWidget)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_openFile = QtWidgets.QPushButton(self.widget)
        self.pushButton_openFile.setObjectName("pushButton_openFile")
        self.verticalLayout.addWidget(self.pushButton_openFile)
        self.pushButton_openDir = QtWidgets.QPushButton(self.widget)
        self.pushButton_openDir.setObjectName("pushButton_openDir")
        self.verticalLayout.addWidget(self.pushButton_openDir)
        self.pushButton_changeSavePath = QtWidgets.QPushButton(self.widget)
        self.pushButton_changeSavePath.setObjectName("pushButton_changeSavePath")
        self.verticalLayout.addWidget(self.pushButton_changeSavePath)
        self.pushButton_nextImg = QtWidgets.QPushButton(self.widget)
        self.pushButton_nextImg.setObjectName("pushButton_nextImg")
        self.verticalLayout.addWidget(self.pushButton_nextImg)
        self.pushButton_lastImg = QtWidgets.QPushButton(self.widget)
        self.pushButton_lastImg.setObjectName("pushButton_lastImg")
        self.verticalLayout.addWidget(self.pushButton_lastImg)
        self.pushButton_Save = QtWidgets.QPushButton(self.widget)
        self.pushButton_Save.setObjectName("pushButton_Save")
        self.verticalLayout.addWidget(self.pushButton_Save)
        self.pushButton_Save_data = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Save_data.setGeometry(QtCore.QRect(1265, 110, 100, 30))
        self.pushButton_Save_data.setObjectName("pushButton_Save_data")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1220, 70, 251, 31))
        self.label.setObjectName("label")
        self.pushButton_Exit = QtWidgets.QPushButton(self.widget)
        self.pushButton_Exit.setObjectName("pushButton_Exit")
        self.verticalLayout.addWidget(self.pushButton_Exit)
        self.verticalLayout_3.addWidget(self.widget)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1500, 35))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_E = QtWidgets.QMenu(self.menubar)
        self.menu_E.setObjectName("menu_E")
        self.menu_V = QtWidgets.QMenu(self.menubar)
        self.menu_V.setObjectName("menu_V")
        self.menu_H = QtWidgets.QMenu(self.menubar)
        self.menu_H.setObjectName("menu_H")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(self)
        self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(self)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(self)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu_E.addAction(self.action_2)
        self.menu_H.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_E.menuAction())
        self.menubar.addAction(self.menu_V.menuAction())
        self.menubar.addAction(self.menu_H.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_display.setText(_translate("MainWindow", ""))
        self.label_2.setText(_translate("MainWindow", "文件列表"))
        self.pushButton_openFile.setText(_translate("MainWindow", "打开文件"))
        self.pushButton_openDir.setText(_translate("MainWindow", "打开目录"))
        self.pushButton_changeSavePath.setText(_translate("MainWindow", "改变存放目录"))
        self.label.setText(_translate("MainWindow", "标记完一张图片后保存数据"))
        self.pushButton_Save_data.setText("保存数据")
        self.pushButton_nextImg.setText(_translate("MainWindow", "下一个图像"))
        self.pushButton_lastImg.setText(_translate("MainWindow", "上一个图像"))
        self.pushButton_Save.setText(_translate("MainWindow", "保存"))
        self.pushButton_Exit.setText(_translate("MainWindow", "退出"))
        self.menu.setTitle(_translate("MainWindow", "文件(F)"))
        self.menu_E.setTitle(_translate("MainWindow", "编辑(E)"))
        self.menu_V.setTitle(_translate("MainWindow", "查看(V)"))
        self.menu_H.setTitle(_translate("MainWindow", "帮助(H)"))
        self.action.setText(_translate("MainWindow", "打开"))
        self.action_2.setText(_translate("MainWindow", "撤销"))
        self.action_3.setText(_translate("MainWindow", "点我跳转"))
        self.pushButton_Exit.clicked.connect(self.close)
        self.plainTextEdit_fileLists.setReadOnly(True)
        self.initSignasAndSolts()
        # img = Image.open("/home/chenyin/Pictures/cat.jpg")
        # img = img.toqpixmap()
        # self.label_display2.setPixmap(img)

    def initSignasAndSolts(self):
        self.pushButton_openFile.clicked.connect(self.openFile)
        self.pushButton_openDir.clicked.connect(self.openDirs)
        self.pushButton_nextImg.clicked.connect(self.nextImg)
        self.pushButton_lastImg.clicked.connect(self.lastImg)
        self.pushButton_changeSavePath.clicked.connect(self.chooseSavePath)
        self.pushButton_Save.clicked.connect(self.saveFile)
        self.label_display.sendDataSig.connect(self.processData)
        self.pushButton_Save_data.clicked.connect(self.saveData)

    def openFile(self):
        dig = QFileDialog()
        filenames = dig.getOpenFileName(self, '选择图片', './', 'Image files (*.jpg  *.png *.jpeg )')
        if filenames[0] == '':
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '没有正确选择文件！')
            msg_box.exec_()
            return
        else:
            self.showImg(filenames[0])

    def openDirs(self):
        fileDlg = QFileDialog()
        fileDlg.setFileMode(QFileDialog.DirectoryOnly)
        fileDlg.setOption(QFileDialog.DontUseNativeDialog, True)
        fileDlg.setDirectory("./data")
        listView = fileDlg.findChild(QListView, "listView")
        if listView:
            listView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        treeView = fileDlg.findChild(QTreeView, "treeView")
        if treeView:
            treeView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        if fileDlg.exec_():
            folders = fileDlg.selectedFiles()
            if len(folders) < 1:
                return
            # self.savePath = folders[0]
            for file in os.listdir(folders[0]):
                file = folders[0] + "/" + file
                self.filelists.append(file)
                self.plainTextEdit_fileLists.appendPlainText(file)
        if len(self.filelists) > 0:
            self.showImg(self.filelists[0])

    def showImg(self, filename):
        if filename.split(".")[-1] not in self.imgs:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '图片格式只能是常见格式！')
            msg_box.exec_()
            return
        img = Image.open(filename)
        self.imgSize = img.size
        size = self.label_display.size()
        size = (size.width(), size.height())
        img = img.resize(size)
        img = img.toqpixmap()
        self.label_display2.setPixmap(img)

    def nextImg(self):
        if len(self.filelists) < 1:
            return
        if self.index == len(self.filelists) - 1:
            self.pushButton_nextImg.setEnabled(False)
            return
        else:
            self.pushButton_lastImg.setEnabled(True)
            self.index += 1
            self.showImg(self.filelists[self.index])

    def lastImg(self):
        if len(self.filelists) < 1:
            return
        if self.index == 0:
            self.pushButton_lastImg.setEnabled(False)
            return
        else:
            self.pushButton_nextImg.setEnabled(True)
            self.index -= 1
            self.showImg(self.filelists[self.index])

    def chooseSavePath(self):
        fileDlg = QFileDialog()
        fileDlg.setFileMode(QFileDialog.DirectoryOnly)
        fileDlg.setOption(QFileDialog.DontUseNativeDialog, True)
        fileDlg.setDirectory("./data")
        listView = fileDlg.findChild(QListView, "listView")
        if listView:
            listView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        treeView = fileDlg.findChild(QTreeView, "treeView")
        if treeView:
            treeView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        if fileDlg.exec_():
            folders = fileDlg.selectedFiles()
            if len(folders) < 1:
                return
            # self.savePath = folders[0]
        print("当前存放路径", self.savePath)

    def saveData(self):
        name = self.filelists[self.index].split("/")[-1]
        data = {"image_name": name, "image_width": self.imgSize[0], "image_height": self.imgSize[1],
                "object": self.object_data}
        self.data.append(data)
        print(self.data)
        self.nextImg()

    def saveFile(self):
        with open(self.savePath + "/data.json", "w") as f:
            data = {"name": "json-data", "version": "1.0", "data": self.data}
            # json.dumps(data, f)
            f.write(json.dumps(data,indent=4))
            f.close()
            print(self.savePath + "/data.json")
            print("数据保存成功")

    # 处理返回的数据
    def processData(self, data):
        # print(self.filelists[self.index], self.imgSize)
        # print(*data[0], data[1])
        scale_x = self.imgSize[0] / 981
        scale_y = self.imgSize[1] / 851
        x, y, w, h = data[0][0:4]
        x = scale_x * x
        y = scale_y * y
        w = scale_x * w
        h = scale_y * h
        # print(*data[0],x,y,w,h,scale_x,scale_y)
        self.object_data.append([int(x), int(y), int(w), int(h), data[1]])
